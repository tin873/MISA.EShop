{"remainingRequest":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\src\\views\\dictionary\\StoreDetail.vue?vue&type=template&id=252f6293&scoped=true&","dependencies":[{"path":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\src\\views\\dictionary\\StoreDetail.vue","mtime":1623855328726},{"path":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\duytin\\Desktop\\MISA.EShop\\MISA.Eshop.FE\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwiIH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYmFja2dyb3VuZCIgfSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1oZWFkZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlYWRlci10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udGl0bGVNb2RlbCkpCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1tb2RhbCBpY29uLWNsb3NlIiwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlKCkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWJvZHkiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWl0ZW0iIH0sIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kZWwtaXRlbS1pbnB1dCIgfSwgWwogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3RvcmUuc3RvcmVDb2RlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic3RvcmUuc3RvcmVDb2RlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2YWxpZGF0ZS1pbnB1dCBtZ3ItNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5zdG9yZS5zdG9yZUNvZGUgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uc3RvcmUsICJzdG9yZUNvZGUiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1lcnJvciBpc0FjdGl2ZSIgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1pdGVtIiB9LCBbCiAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGVsLWl0ZW0taW5wdXQiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnN0b3JlLnN0b3JlTmFtZSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInN0b3JlLnN0b3JlTmFtZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmFsaWRhdGUtaW5wdXQgbWdyLTUiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uc3RvcmUuc3RvcmVOYW1lIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnN0b3JlLCAic3RvcmVOYW1lIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24tZXJyb3IgaXNBY3RpdmUiIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1zcGVjaWFsIiB9LCBbCiAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGVsLWl0ZW0taW5wdXQiIH0sIFsKICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnN0b3JlLmFkZHJlc3MsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzdG9yZS5hZGRyZXNzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2YWxpZGF0ZS10ZXh0YXJlYSBtZ3ItNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5zdG9yZS5hZGRyZXNzIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnN0b3JlLCAiYWRkcmVzcyIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1lcnJvciBpc0FjdGl2ZSIgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1pdGVtIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRvdWJsZS1pdGVtIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1uYW1lIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJT4buRIMSRaeG7h24gdGhv4bqhaSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3RvcmUucGhvbmVOdW1iZXIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzdG9yZS5waG9uZU51bWJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmFsaWRhdGUtaW5wdXQtc29ydCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5zdG9yZS5waG9uZU51bWJlciB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5zdG9yZSwgInBob25lTnVtYmVyIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZG91YmxlLWl0ZW0iIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1pdGVtLW5hbWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk3DoyBz4buRIHRodeG6vyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3RvcmUuc3RvcmVUYXhDb2RlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic3RvcmUuc3RvcmVUYXhDb2RlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2YWxpZGF0ZS1pbnB1dC1zb3J0IiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnN0b3JlLnN0b3JlVGF4Q29kZSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5zdG9yZSwgInN0b3JlVGF4Q29kZSIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWl0ZW0iIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZG91YmxlLWl0ZW0iIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1pdGVtLW5hbWUiIH0sIFtfdm0uX3YoIlF14buRYyBnaWEiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbGxjYWwtZmxleCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tYm9ib3gtbW9kZWwiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvdW50cnlOYW1lLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNvdW50cnlOYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dC1jdXN0b20tY2JiIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbnB1dENvdW50cnkiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiY2jhu41uIHF14buRYyBnaWEiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY291bnRyeU5hbWUgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBpbnB1dDogWwogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jb3VudHJ5TmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vblNlYXJjaENvdW50cnkoJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImJ1dHRvbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4tY2JiIGljb24tZG93biIsCiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2hvd0Ryb3BDb3VudHJ5IH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LWl0ZW0iLAogICAgICAgICAgICAgICAgICBjbGFzczogeyBpc0FjdGl2ZUNiYjogX3ZtLmlzQWN0aXZlIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmxpc3RJdGVtQ291bnRyeSwgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmNvdW50cnlJZCwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3RpdmVJdGVtOiBpdGVtLmNvdW50cnlJZCA9PSBfdm0uY291bnRyeUlkIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZWxlY3RJdGVtQ291bnRyeSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY291bnRyeUlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb3VudHJ5TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb3VudHJ5TmFtZSkgKyAiICIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkb3VibGUtaXRlbSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWl0ZW0tbmFtZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVOG7iW5oL1Row6BuaCBwaOG7kSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbGxjYWwtZmxleCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tYm9ib3gtbW9kZWwiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnByb3ZpbmNlTmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm92aW5jZU5hbWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0LWN1c3RvbS1jYmIiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICBpZDogImlucHV0UHJvdmluY2UiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiY2jhu41uIHRow6BuaCBwaOG7kSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5wcm92aW5jZU5hbWUgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBpbnB1dDogWwogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm92aW5jZU5hbWUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25TZWFyY2hQcm92aW5jZSgkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiYnV0dG9uIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bi1jYmIgaWNvbi1kb3duIiwKICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaG93RHJvcFByb3ZpbmNlIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LWl0ZW0iLAogICAgICAgICAgICAgICAgICBjbGFzczogeyBpc0FjdGl2ZUNiYjogX3ZtLmlzQWN0aXZlUHJvdmluY2UgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF92bS5fbChfdm0ubGlzdEl0ZW1Qcm92aW5jZSwgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLnByb3ZpbmNlSWQsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIml0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZlSXRlbTogaXRlbS5wcm92aW5jZUlkID09IF92bS5wcm92aW5jZUlkIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZWxlY3RJdGVtUHJvdmluY2UoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnByb3ZpbmNlSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnByb3ZpbmNlTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5wcm92aW5jZU5hbWUpICsgIiAiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRvdWJsZS1pdGVtIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1uYW1lIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJRdeG6rW4vSHV54buHbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbGxjYWwtZmxleCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tYm9ib3gtbW9kZWwiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRpc3RyaWN0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkaXN0cmljdE5hbWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0LWN1c3RvbS1jYmIiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICBpZDogImlucHV0RGlzdHJpY3QiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiY2jhu41uIFF14bqtbi9IdXnhu4duIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmRpc3RyaWN0TmFtZSB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGlucHV0OiBbCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRpc3RyaWN0TmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vblNlYXJjaERpc3RyaWN0KCRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJidXR0b24iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWNiYiBpY29uLWRvd24iLAogICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNob3dEcm9wRGlzdHJpY3QgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtaXRlbSIsCiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGlzQWN0aXZlQ2JiOiBfdm0uaXNBY3RpdmVEaXN0cmljdCB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5saXN0SXRlbURpc3RyaWN0LCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGl0ZW0uZGlzdHJpY3RJZCwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3RpdmVJdGVtOiBpdGVtLmRpc3RyaWN0SWQgPT0gX3ZtLmRpc3RyaWN0SWQgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNlbGVjdEl0ZW1EaXN0cmljdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGlzdHJpY3RJZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGlzdHJpY3ROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhpdGVtLmRpc3RyaWN0TmFtZSkgKyAiICIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkb3VibGUtaXRlbSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWl0ZW0tbmFtZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiUGjGsOG7nW5nL1jDoyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbGxjYWwtZmxleCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tYm9ib3gtbW9kZWwiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLndhcmROYW1lLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIndhcmROYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dC1jdXN0b20tY2JiIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbnB1dFdhcmQiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiY2jhu41uIFjDoy9QaMaw4budbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ud2FyZE5hbWUgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBpbnB1dDogWwogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS53YXJkTmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vblNlYXJjaFdhcmQoJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImJ1dHRvbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4tY2JiIGljb24tZG93biIsCiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2hvd0Ryb3BXYXJkIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LWl0ZW0iLAogICAgICAgICAgICAgICAgICBjbGFzczogeyBpc0FjdGl2ZUNiYjogX3ZtLmlzQWN0aXZlV2FyZCB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5saXN0SXRlbVdhcmQsIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGtleTogaXRlbS53YXJkSWQsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIml0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZlSXRlbTogaXRlbS53YXJkSWQgPT0gX3ZtLndhcmRJZCB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2VsZWN0SXRlbVdhcmQoaXRlbS53YXJkSWQsIGl0ZW0ud2FyZE5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0ud2FyZE5hbWUpICsgIiAiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRvdWJsZS1pdGVtIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1uYW1lIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCLEkMaw4budbmcgUGjhu5EiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnN0b3JlLnN0cmVldCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInN0b3JlLnN0cmVldCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmFsaWRhdGUtaW5wdXQtc29ydCBtZ3ItNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5zdG9yZS5zdHJlZXQgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uc3RvcmUsICJzdHJlZXQiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtZm9vdGVyIiB9LCBbCiAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyLXJpZ2h0IiB9LCBbCiAgICAgICAgICBfdm0uX20oNCksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bi1mb290ZXItYWRkLXNhdmUgbWdyLTggaG92ZXItcG9pbnRlciIsCiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hZGROZXdTdG9yZSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24tZm9vdGVyLWFkZCIgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWZvb3Rlci1uYW1lLWFkZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJMxrB1IHbDoCB0aMOqbSBt4bubaSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWZvb3Rlci1jYW5jZWwgaG92ZXItcG9pbnRlciIsCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jbG9zZSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uLWZvb3Rlci1jYW5jZWwiIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbS1mb290ZXItbmFtZS1jYW5jZWwiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSOG7p3kgYuG7jyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1uYW1lIiB9LCBbCiAgICAgIF92bS5fdigiTcOjIGPhu61hIGjDoG5nIiksCiAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiKiIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaXRlbS1uYW1lIiB9LCBbCiAgICAgIF92bS5fdigiVMOqbiBj4butYSBow6BuZyIpLAogICAgICBfYygic3BhbiIsIFtfdm0uX3YoIioiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWl0ZW0tbmFtZSIgfSwgWwogICAgICBfdm0uX3YoIsSQ4buLYSBjaOG7iSIpLAogICAgICBfYygic3BhbiIsIFtfdm0uX3YoIioiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci1sZWZ0IiB9LCBbCiAgICAgIF9jKCJidXR0b24iLCB7IHN0YXRpY0NsYXNzOiAiYnRuLWZvb3Rlci1oZWxwIGhvdmVyLXBvaW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb24tZm9vdGVyLWhlbHAiIH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaXRlbS1mb290ZXItbmFtZSIgfSwgW192bS5fdigiVHLhu6MgZ2nDunAiKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImJ1dHRvbiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJidG4tZm9vdGVyLXNhdmUgbWdyLTggaG92ZXItcG9pbnRlciIgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1mb290ZXItc2F2ZSIgfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtLWZvb3Rlci1zYXZlIiB9LCBbX3ZtLl92KCJMxrB1IildKQogICAgICBdCiAgICApCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}